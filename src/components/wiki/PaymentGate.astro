---
interface Props {
  contentTitle: string;
  privyAppId: string;
}

const { contentTitle, privyAppId } = Astro.props;
const isConfigured = privyAppId && privyAppId !== 'your-privy-app-id-here';
---

<div id="payment-container" class="text-center">
  {isConfigured ? (
    <!-- Privy Payment Interface -->
    <div class="space-y-4">
      <!-- Price Display -->
      <div class="text-center">
        <div class="text-2xl font-bold text-blue-900 dark:text-blue-100 mb-1">
          0.5 SOL
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400" id="price-display">
          Loading price...
        </div>
        <div class="text-xs text-gray-500 dark:text-gray-500 mt-1">
          Lifetime Access • No Subscription
        </div>
      </div>

      <!-- Currency Selection -->
      <div class="flex gap-2 justify-center" id="currency-selection" style="display: none;">
        <button
          id="sol-btn"
          class="px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-blue-600 text-white"
        >
          Pay with SOL
        </button>
        <button
          id="usdc-btn"
          class="px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300"
        >
          Pay with USDC
        </button>
      </div>

      <!-- Payment Button -->
      <div id="payment-interface">
        <button
          id="connect-wallet-btn"
          class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:opacity-50 w-full"
        >
          Connect Wallet to Pay
        </button>
        <p class="text-xs text-center text-gray-500 mt-2">
          Secure payment to: vivgdu332GMEk3FaupQa92gQjYd9LX6TMgjMVsLaCu4
        </p>
      </div>

      <!-- Status Messages -->
      <div id="status-messages"></div>
    </div>
  ) : (
    <!-- Not Configured -->
    <div class="bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-300 px-4 py-3 rounded">
      <p><strong>Payment System Not Configured</strong></p>
      <p class="text-sm">Privy App ID: {privyAppId || 'Not set'}</p>
      <p class="text-sm">Please contact the site administrator to enable payments.</p>
    </div>
  )}
</div>

<!-- Payment System Script -->
<script define:vars={{ contentTitle, privyAppId, isConfigured }}>
  console.log('Payment script loaded:', { contentTitle, privyAppId: !!privyAppId, isConfigured });

  if (!isConfigured) {
    console.log('Privy not configured, skipping payment setup');
    return;
  }

  let privy = null;
  let selectedCurrency = 'SOL';
  let priceData = { solToUsd: 100, loading: true };

  // Fetch SOL price
  async function fetchPrice() {
    try {
      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd');
      const data = await response.json();
      priceData = {
        solToUsd: data.solana?.usd || 100,
        loading: false
      };
      updatePriceDisplay();
    } catch (error) {
      console.error('Failed to fetch price:', error);
      priceData = { solToUsd: 100, loading: false };
      updatePriceDisplay();
    }
  }

  function updatePriceDisplay() {
    const priceEl = document.getElementById('price-display');
    const currencySelection = document.getElementById('currency-selection');
    
    if (priceEl) {
      const usdValue = (0.5 * priceData.solToUsd).toFixed(2);
      priceEl.textContent = `≈ $${usdValue} USD`;
    }
    
    if (currencySelection && !priceData.loading) {
      currencySelection.style.display = 'flex';
    }
  }

  function showStatus(message, type = 'info') {
    const statusEl = document.getElementById('status-messages');
    if (!statusEl) return;

    const className = type === 'error' ? 'bg-red-100 border-red-400 text-red-700' : 
                     type === 'success' ? 'bg-green-100 border-green-400 text-green-700' :
                     'bg-blue-100 border-blue-400 text-blue-700';

    statusEl.innerHTML = `
      <div class="${className} px-4 py-3 rounded border">
        <p class="text-sm">${message}</p>
      </div>
    `;
  }

  function showPremiumContent() {
    console.log('Showing premium content');
    const gate = document.getElementById('premium-gate');
    const content = document.getElementById('premium-content');
    if (gate) gate.style.display = 'none';
    if (content) content.classList.remove('hidden');
  }

  function checkExistingAccess() {
    try {
      const accessKey = localStorage.getItem(`premium_${contentTitle}`);
      const globalAccess = localStorage.getItem('premium_access');
      return !!(accessKey || globalAccess === 'true');
    } catch {
      return false;
    }
  }

  // Initialize Privy
  async function initializePrivy() {
    console.log('Initializing Privy...');
    
    try {
      // Dynamic import of Privy
      const { PrivyProvider, usePrivy } = await import('@privy-io/react-auth');
      console.log('Privy loaded successfully');
      
      // For now, let's use a simpler approach without React
      showStatus('Payment system loaded. Click Connect Wallet to proceed.');
      
      const connectBtn = document.getElementById('connect-wallet-btn');
      if (connectBtn) {
        connectBtn.onclick = function() {
          showStatus('Wallet connection is being implemented. For now, please contact support for manual payment.', 'info');
        };
      }
      
    } catch (error) {
      console.error('Failed to load Privy:', error);
      showStatus('Failed to load payment system. Please refresh the page.', 'error');
    }
  }

  // Currency selection handlers
  function setupCurrencySelection() {
    const solBtn = document.getElementById('sol-btn');
    const usdcBtn = document.getElementById('usdc-btn');

    if (solBtn) {
      solBtn.onclick = function() {
        selectedCurrency = 'SOL';
        solBtn.className = 'px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-blue-600 text-white';
        usdcBtn.className = 'px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300';
        updatePaymentButton();
      };
    }

    if (usdcBtn) {
      usdcBtn.onclick = function() {
        selectedCurrency = 'USDC';
        usdcBtn.className = 'px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-blue-600 text-white';
        solBtn.className = 'px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300';
        updatePaymentButton();
      };
    }
  }

  function updatePaymentButton() {
    const connectBtn = document.getElementById('connect-wallet-btn');
    if (connectBtn && !priceData.loading) {
      const amount = selectedCurrency === 'SOL' ? '0.5 SOL' : `$${(0.5 * priceData.solToUsd).toFixed(2)} USDC`;
      connectBtn.textContent = `Pay ${amount}`;
    }
  }

  // Initialize everything
  async function initialize() {
    console.log('Starting initialization...');
    
    // Check if user already has access
    if (checkExistingAccess()) {
      showPremiumContent();
      return;
    }

    // Fetch price and setup UI
    await fetchPrice();
    setupCurrencySelection();
    
    // Initialize Privy
    await initializePrivy();
    
    console.log('Initialization complete');
  }

  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }
</script>