---
import Layout from '@layouts/Layout.astro'

const { 
  title, 
  description, 
  location, 
  category, 
  isPremium, 
  lastUpdated,
  tags,
  rating,
  priceRange 
} = Astro.props.frontmatter

const contentSlug = title.toLowerCase().replace(/[^a-z0-9]/g, '-');
const privyAppId = import.meta.env.PUBLIC_PRIVY_APP_ID || '';
---

<Layout title={title}>
  <main>
    <article>
      <section class="border-b borderBase pb-5 pt-5">
        <div class="mb-4">
          <p class="text-3xl font-bold">{title}</p>
          <p class="text-lg text-gray-600 dark:text-gray-400 mt-2">{description}</p>
        </div>
        
        <div class="flex flex-wrap gap-4 text-sm text-gray-500 dark:text-gray-400">
          <span>üìç {location.charAt(0).toUpperCase() + location.slice(1)}</span>
          <span>üè∑Ô∏è {category}</span>
          {rating && <span>‚≠ê {rating}/5</span>}
          {priceRange && <span>üí∞ {priceRange}</span>}
          <span>üìÖ Updated: {lastUpdated}</span>
          {isPremium && <span class="bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded">üîí Premium</span>}
        </div>
        
        {tags && (
          <div class="flex flex-wrap gap-2 mt-3">
            {tags.map((tag: string) => (
              <span class="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-1 rounded text-xs">
                #{tag}
              </span>
            ))}
          </div>
        )}
      </section>
      
      <div class="prose max-w-none dark:prose-invert">
        <div id="content-container">
          <slot />
        </div>
      </div>
    </article>
  </main>
</Layout>

<script define:vars={{ contentSlug, isPremium, privyAppId }}>
// Wiki Content Manager
class WikiContentManager {
  constructor() {
    this.contentSlug = contentSlug;
    this.isPremium = isPremium;
    this.privyAppId = privyAppId;
    this.selectedCurrency = 'SOL';
    this.solPrice = 100;
    this.premiumContent = '';
    
    console.log('üöÄ WikiContentManager initialized:', {
      contentSlug: this.contentSlug,
      isPremium: this.isPremium,
      privyConfigured: !!this.privyAppId
    });
  }

  hasAccess() {
    try {
      const accessKey = localStorage.getItem(`premium_${this.contentSlug}`);
      const globalAccess = localStorage.getItem('premium_access');
      return !!(accessKey || globalAccess === 'true');
    } catch {
      return false;
    }
  }

  async fetchSolPrice() {
    try {
      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd');
      const data = await response.json();
      this.solPrice = data.solana?.usd || 100;
      console.log('SOL price fetched:', this.solPrice);
    } catch (error) {
      console.error('Failed to fetch SOL price:', error);
      this.solPrice = 100;
    }
  }

  processContent() {
    const container = document.getElementById('content-container');
    if (!container || !this.isPremium) {
      console.log('Not processing - not premium or no container');
      return;
    }

    const fullHTML = container.innerHTML;
    console.log('Processing content, full length:', fullHTML.length);

    // Find premium markers
    const startMarker = '<!-- PREMIUM_CONTENT_START -->';
    const endMarker = '<!-- PREMIUM_CONTENT_END -->';
    
    const startIndex = fullHTML.indexOf(startMarker);
    const endIndex = fullHTML.indexOf(endMarker);
    
    console.log('Premium markers:', { startIndex, endIndex });

    if (startIndex !== -1 && endIndex !== -1) {
      // Found markers - split content
      const freeContent = fullHTML.substring(0, startIndex).trim();
      this.premiumContent = fullHTML.substring(startIndex + startMarker.length, endIndex).trim();
      
      console.log('Content split successfully:', {
        freeLength: freeContent.length,
        premiumLength: this.premiumContent.length
      });
      
      // Show only free content
      container.innerHTML = freeContent;
      
      // Add premium gate
      this.addPremiumGate(container);
    } else {
      // No markers - create artificial split
      const textContent = container.textContent || '';
      if (textContent.length > 500) {
        const words = fullHTML.split(' ');
        const freeWords = words.slice(0, Math.floor(words.length * 0.3)); // First 30%
        this.premiumContent = words.slice(Math.floor(words.length * 0.3)).join(' ');
        
        container.innerHTML = freeWords.join(' ') + '...';
        this.addPremiumGate(container);
        
        console.log('Artificial split created - showing premium gate');
      }
    }
  }

  addPremiumGate(container) {
    const gateHTML = `
      <div id="premium-gate" class="my-8 border-2 border-dashed border-yellow-400 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-6">
        <div class="text-center">
          <h3 class="text-xl font-bold text-yellow-800 dark:text-yellow-200 mb-2">
            üîí Premium Content Ahead
          </h3>
          <p class="text-yellow-700 dark:text-yellow-300 mb-6">
            Get access to detailed reviews, exact locations, insider tips, and exclusive spots that most tourists never find.
          </p>
          
          <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 shadow-sm">
            <div class="space-y-4">
              <div class="text-center">
                <div class="text-2xl font-bold text-blue-900 dark:text-blue-100 mb-1">
                  0.5 SOL
                </div>
                <div class="text-sm text-gray-600 dark:text-gray-400" id="usd-price">
                  ‚âà $${(0.5 * this.solPrice).toFixed(2)} USD
                </div>
                <div class="text-xs text-gray-500 dark:text-gray-500 mt-1">
                  Lifetime Access ‚Ä¢ No Subscription
                </div>
              </div>

              <div class="flex gap-2 justify-center">
                <button id="sol-btn" class="px-3 py-2 rounded-lg text-sm font-medium bg-blue-600 text-white">
                  Pay with SOL
                </button>
                <button id="usdc-btn" class="px-3 py-2 rounded-lg text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300">
                  Pay with USDC
                </button>
              </div>

              <button id="connect-wallet-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition-colors w-full">
                ${this.privyAppId ? 'Connect Wallet & Pay 0.5 SOL' : 'Payment Not Configured'}
              </button>

              <div id="payment-status" class="text-center text-sm text-gray-600 dark:text-gray-400">
                ${this.privyAppId ? 'Secure payment via Solana blockchain' : 'Contact admin to enable payments'}
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    
    container.insertAdjacentHTML('beforeend', gateHTML);
    console.log('‚úÖ Premium gate added to page');
    
    // Setup event listeners
    this.setupPaymentListeners();
  }

  setupPaymentListeners() {
    const solBtn = document.getElementById('sol-btn');
    const usdcBtn = document.getElementById('usdc-btn');
    const payBtn = document.getElementById('connect-wallet-btn');

    if (solBtn && usdcBtn) {
      solBtn.onclick = () => {
        this.selectedCurrency = 'SOL';
        solBtn.className = 'px-3 py-2 rounded-lg text-sm font-medium bg-blue-600 text-white';
        usdcBtn.className = 'px-3 py-2 rounded-lg text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300';
        if (payBtn) payBtn.textContent = 'Pay 0.5 SOL';
      };

      usdcBtn.onclick = () => {
        this.selectedCurrency = 'USDC';
        usdcBtn.className = 'px-3 py-2 rounded-lg text-sm font-medium bg-blue-600 text-white';
        solBtn.className = 'px-3 py-2 rounded-lg text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300';
        if (payBtn) payBtn.textContent = `Pay $${(0.5 * this.solPrice).toFixed(2)} USDC`;
      };
    }

    if (payBtn && this.privyAppId) {
      payBtn.onclick = () => this.processPayment();
    }
  }

  async processPayment() {
    const statusEl = document.getElementById('payment-status');
    const payBtn = document.getElementById('connect-wallet-btn');
    
    if (!statusEl || !payBtn) return;
    
    try {
      payBtn.disabled = true;
      statusEl.innerHTML = '<span class="text-blue-600">üîÑ Connecting wallet...</span>';
      
      // Simulate wallet connection
      await new Promise(resolve => setTimeout(resolve, 1500));
      statusEl.innerHTML = '<span class="text-green-600">‚úÖ Wallet connected</span>';
      
      // Simulate payment
      statusEl.innerHTML = '<span class="text-blue-600">üîÑ Processing payment...</span>';
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      // Save payment proof
      const proof = {
        signature: `demo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        wallet: 'demo_wallet_address',
        timestamp: Date.now(),
        amount: this.selectedCurrency === 'SOL' ? '0.5' : (0.5 * this.solPrice).toFixed(2),
        currency: this.selectedCurrency,
        contentTitle: this.contentSlug
      };
      
      localStorage.setItem(`premium_${this.contentSlug}`, JSON.stringify(proof));
      localStorage.setItem('premium_access', 'true');
      
      statusEl.innerHTML = '<span class="text-green-600">üéâ Payment successful!</span>';
      
      setTimeout(() => {
        this.unlockPremiumContent();
      }, 1000);
      
    } catch (error) {
      console.error('Payment failed:', error);
      statusEl.innerHTML = '<span class="text-red-600">‚ùå Payment failed. Try again.</span>';
      payBtn.disabled = false;
    }
  }

  unlockPremiumContent() {
    const gate = document.getElementById('premium-gate');
    const container = document.getElementById('content-container');
    
    if (gate) {
      gate.style.display = 'none';
    }
    
    if (container && this.premiumContent) {
      container.innerHTML += this.premiumContent;
      console.log('‚úÖ Premium content unlocked');
    }
  }

  async updatePriceDisplay() {
    await this.fetchSolPrice();
    const priceEl = document.getElementById('usd-price');
    if (priceEl) {
      priceEl.textContent = `‚âà $${(0.5 * this.solPrice).toFixed(2)} USD`;
    }
  }

  async initialize() {
    console.log('üîÑ Starting wiki initialization...');
    
    // Check if user already has access
    if (this.hasAccess()) {
      console.log('‚úÖ User has access - showing full content');
      return;
    }
    
    // Fetch current SOL price
    await this.fetchSolPrice();
    
    // Process content and show premium gate
    this.processContent();
    
    // Update price display if gate exists
    setTimeout(() => {
      this.updatePriceDisplay();
    }, 100);
    
    console.log('‚úÖ Wiki initialization complete');
  }
}

// Initialize when DOM is ready
function initWiki() {
  const manager = new WikiContentManager();
  manager.initialize();
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initWiki);
} else {
  initWiki();
}
</script>

<style>
.prose { @apply text-gray-800 dark:text-gray-200; }
.prose h1, .prose h2, .prose h3, .prose h4 { @apply text-black dark:text-white; }
.prose ul, .prose ol { @apply text-gray-700 dark:text-gray-300; }
.prose strong { @apply text-black dark:text-white; }
.prose code { @apply bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-1 py-0.5 rounded; }
</style>