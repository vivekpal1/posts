---
import Layout from '@layouts/Layout.astro'
import { getCollection } from 'astro:content'

// Get all wiki content
const freeWiki = await getCollection('wiki-free')
const premiumWiki = await getCollection('wiki-premium')

// Group by location and category
const groupedFree = freeWiki.reduce((acc, entry) => {
  const { location, category } = entry.data
  if (!acc[location]) acc[location] = {}
  if (!acc[location][category]) acc[location][category] = []
  acc[location][category].push(entry)
  return acc
}, {})

const groupedPremium = premiumWiki.reduce((acc, entry) => {
  const { location, category } = entry.data
  if (!acc[location]) acc[location] = {}
  if (!acc[location][category]) acc[location][category] = []
  acc[location][category].push(entry)
  return acc
}, {})
---

<Layout title="Digital Nomad's Wiki">
  <main class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header -->
    <section class="text-center mb-12">
      <h1 class="text-5xl font-bold mb-4">🌍 Digital Nomad's Wiki</h1>
      <p class="text-xl text-gray-600 dark:text-gray-400 mb-6">
        Your comprehensive guide to the best spots across Southeast Asia and beyond. 
        Curated by a fellow nomad, powered by Solana.
      </p>
    </section>

    <!-- Payment Status -->
    <div id="access-status" class="mb-8"></div>

    <!-- Free Content Section -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 text-center">🆓 Free Content</h2>
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {Object.entries(groupedFree).map(([location, categories]) => (
          <div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
            <div class="bg-gray-50 dark:bg-gray-800 px-4 py-3 border-b">
              <h3 class="font-semibold capitalize flex items-center">
                <span class="mr-2">
                  {location === 'danang' ? '🇻🇳' : 
                   location === 'saigon' ? '🏙️' : 
                   location === 'thailand' ? '🇹🇭' : '📍'}
                </span>
                {location.replace('-', ' ')}
              </h3>
            </div>
            <div class="p-4">
              {Object.entries(categories).map(([category, entries]) => (
                <div class="mb-4 last:mb-0">
                  <h4 class="font-medium text-sm text-gray-700 dark:text-gray-300 mb-2">
                    {category === 'cafe' ? '☕ Cafes' :
                     category === 'coworking' ? '💼 Coworking' :
                     category === 'food' ? '🍜 Food' : category}
                  </h4>
                  {entries.map((entry) => (
                    <a 
                      href={`/wiki/free/${entry.slug}`}
                      class="block text-blue-600 dark:text-blue-400 hover:underline text-sm mb-1"
                    >
                      {entry.data.title}
                    </a>
                  ))}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </section>

    <!-- Premium Content Section -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 text-center">🔒 Premium Content</h2>
      
      <!-- Payment Gate -->
      <div id="premium-gate" class="border-2 border-dashed border-yellow-400 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-8 mb-8">
        <div class="text-center max-w-2xl mx-auto">
          <h3 class="text-2xl font-bold text-yellow-800 dark:text-yellow-200 mb-4">
            🔒 Unlock Premium Wiki Access
          </h3>
          <p class="text-yellow-700 dark:text-yellow-300 mb-6">
            Get lifetime access to detailed guides with exact locations, insider tips, 
            contact information, and exclusive spots that most tourists never find.
          </p>
          
          <!-- Payment Interface -->
          <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 shadow-sm">
            <div class="text-3xl font-bold text-blue-900 dark:text-blue-100 mb-2">0.5 SOL</div>
            <div class="text-lg text-gray-600 dark:text-gray-400 mb-4" id="usd-price">≈ $50 USD</div>
            <div class="text-sm text-gray-500 mb-6">Lifetime Access • All Premium Guides • Future Updates</div>
            
            <div class="flex gap-3 justify-center mb-6">
              <button id="sol-btn" class="px-4 py-2 bg-blue-600 text-white rounded-lg font-medium">
                Pay with SOL
              </button>
              <button id="usdc-btn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium">
                Pay with USDC
              </button>
            </div>
            
            <button id="pay-btn" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-4 px-8 rounded-lg text-lg">
              Connect Wallet & Pay
            </button>
            
            <div id="payment-status" class="mt-4 text-sm"></div>
            
            <div class="mt-6 text-xs text-gray-500">
              <p>💰 Payment to: vivgdu332GMEk3FaupQa92gQjYd9LX6TMgjMVsLaCu4</p>
              <p>🔒 Secure Solana blockchain payment</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Premium Content Preview (Locked) -->
      <div id="premium-preview" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 opacity-50 pointer-events-none">
        {Object.entries(groupedPremium).map(([location, categories]) => (
          <div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden relative">
            <div class="absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center z-10">
              <div class="text-white text-2xl">🔒</div>
            </div>
            <div class="bg-gray-50 dark:bg-gray-800 px-4 py-3 border-b">
              <h3 class="font-semibold capitalize flex items-center">
                <span class="mr-2">
                  {location === 'danang' ? '🇻🇳' : 
                   location === 'saigon' ? '🏙️' : 
                   location === 'thailand' ? '🇹🇭' : '📍'}
                </span>
                {location.replace('-', ' ')} Premium
              </h3>
            </div>
            <div class="p-4">
              {Object.entries(categories).map(([category, entries]) => (
                <div class="mb-4 last:mb-0">
                  <h4 class="font-medium text-sm text-gray-700 dark:text-gray-300 mb-2">
                    {category === 'cafe' ? '☕ Hidden Cafes' :
                     category === 'coworking' ? '💼 Exclusive Spaces' :
                     category === 'food' ? '🍜 Secret Spots' : category}
                  </h4>
                  {entries.map((entry) => (
                    <div class="text-gray-500 text-sm mb-1">
                      {entry.data.title} ⭐⭐⭐⭐⭐
                    </div>
                  ))}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>

      <!-- Unlocked Premium Content -->
      <div id="premium-unlocked" class="hidden grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {Object.entries(groupedPremium).map(([location, categories]) => (
          <div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
            <div class="bg-gradient-to-r from-yellow-50 to-yellow-100 dark:from-yellow-900/20 dark:to-yellow-800/20 px-4 py-3 border-b">
              <h3 class="font-semibold capitalize flex items-center">
                <span class="mr-2">⭐</span>
                {location.replace('-', ' ')} Premium
              </h3>
            </div>
            <div class="p-4">
              {Object.entries(categories).map(([category, entries]) => (
                <div class="mb-4 last:mb-0">
                  <h4 class="font-medium text-sm text-gray-700 dark:text-gray-300 mb-2">
                    {category === 'cafe' ? '☕ Hidden Cafes' :
                     category === 'coworking' ? '💼 Exclusive Spaces' :
                     category === 'food' ? '🍜 Secret Spots' : category}
                  </h4>
                  {entries.map((entry) => (
                    <a 
                      href={`/wiki/premium/${entry.slug}`}
                      class="block text-yellow-600 dark:text-yellow-400 hover:underline text-sm mb-1 font-medium"
                    >
                      🔓 {entry.data.title}
                    </a>
                  ))}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </section>

    <!-- Features Section -->
    <section class="text-center">
      <h2 class="text-2xl font-bold mb-6">What You Get With Premium Access</h2>
      <div class="grid md:grid-cols-3 gap-6">
        <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6">
          <div class="text-3xl mb-3">📍</div>
          <h3 class="font-semibold mb-2">Exact Locations</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400">GPS coordinates, exact addresses, and detailed directions to hidden gems</p>
        </div>
        <div class="bg-green-50 dark:bg-green-900/20 rounded-lg p-6">
          <div class="text-3xl mb-3">🤝</div>
          <h3 class="font-semibold mb-2">Insider Tips</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400">Contact info, best times to visit, local hacks, and negotiation tips</p>
        </div>
        <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-6">
          <div class="text-3xl mb-3">🔄</div>
          <h3 class="font-semibold mb-2">Regular Updates</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400">New locations added monthly, real-time updates from my travels</p>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
let selectedCurrency = 'SOL';
let solPrice = 100;

// Check if user has premium access
function hasPremiumAccess() {
  try {
    const globalAccess = localStorage.getItem('wiki_premium_access');
    const paymentProof = localStorage.getItem('wiki_premium_payment');
    return globalAccess === 'true' || !!paymentProof;
  } catch {
    return false;
  }
}

// Update access status
function updateAccessStatus() {
  const statusEl = document.getElementById('access-status');
  const premiumGate = document.getElementById('premium-gate');
  const premiumPreview = document.getElementById('premium-preview');
  const premiumUnlocked = document.getElementById('premium-unlocked');
  
  if (!statusEl) return;
  
  if (hasPremiumAccess()) {
    statusEl.innerHTML = `
      <div class="bg-green-100 dark:bg-green-900/20 border border-green-400 text-green-700 dark:text-green-300 px-6 py-4 rounded-lg text-center">
        <h3 class="font-bold mb-1">🎉 Premium Access Activated!</h3>
        <p class="text-sm">You have lifetime access to all premium wiki content.</p>
      </div>
    `;
    
    if (premiumGate) premiumGate.style.display = 'none';
    if (premiumPreview) premiumPreview.style.display = 'none';
    if (premiumUnlocked) premiumUnlocked.classList.remove('hidden');
  } else {
    statusEl.innerHTML = `
      <div class="bg-blue-100 dark:bg-blue-900/20 border border-blue-400 text-blue-700 dark:text-blue-300 px-6 py-4 rounded-lg text-center">
        <h3 class="font-bold mb-1">📚 Welcome to the Digital Nomad Wiki</h3>
        <p class="text-sm">Browse free guides below or unlock premium access for exclusive content.</p>
      </div>
    `;
  }
}

// Update SOL price
async function updatePrice() {
  try {
    const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd');
    const data = await response.json();
    solPrice = data.solana.usd || 100;
    
    const priceEl = document.getElementById('usd-price');
    if (priceEl) {
      priceEl.textContent = `≈ $${(0.5 * solPrice).toFixed(2)} USD`;
    }
  } catch (error) {
    console.error('Price fetch failed:', error);
  }
}

// Setup currency selection
function setupCurrency() {
  const solBtn = document.getElementById('sol-btn');
  const usdcBtn = document.getElementById('usdc-btn');
  const payBtn = document.getElementById('pay-btn');

  if (solBtn && usdcBtn && payBtn) {
    solBtn.onclick = () => {
      selectedCurrency = 'SOL';
      solBtn.className = 'px-4 py-2 bg-blue-600 text-white rounded-lg font-medium';
      usdcBtn.className = 'px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium';
      payBtn.textContent = 'Pay 0.5 SOL';
    };

    usdcBtn.onclick = () => {
      selectedCurrency = 'USDC';
      usdcBtn.className = 'px-4 py-2 bg-blue-600 text-white rounded-lg font-medium';
      solBtn.className = 'px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium';
      payBtn.textContent = `Pay $${(0.5 * solPrice).toFixed(2)} USDC`;
    };
  }
}

// Process payment
async function processPayment() {
  const statusEl = document.getElementById('payment-status');
  const payBtn = document.getElementById('pay-btn');
  
  if (!statusEl || !payBtn) return;
  
  statusEl.innerHTML = '<span class="text-blue-600">🔄 Connecting wallet...</span>';
  payBtn.disabled = true;
  
  try {
    // Simulate wallet connection
    await new Promise(resolve => setTimeout(resolve, 1500));
    statusEl.innerHTML = '<span class="text-green-600">✅ Wallet connected</span>';
    
    // Simulate payment processing
    statusEl.innerHTML = '<span class="text-blue-600">🔄 Processing payment...</span>';
    await new Promise(resolve => setTimeout(resolve, 2500));
    
    // Store payment proof
    const proof = {
      signature: `wiki_payment_${Date.now()}_${Math.random()}`,
      wallet: 'demo_wallet_address',
      timestamp: Date.now(),
      amount: selectedCurrency === 'SOL' ? '0.5' : (0.5 * solPrice).toFixed(2),
      currency: selectedCurrency,
      type: 'wiki_premium_lifetime'
    };
    
    localStorage.setItem('wiki_premium_payment', JSON.stringify(proof));
    localStorage.setItem('wiki_premium_access', 'true');
    
    statusEl.innerHTML = '<span class="text-green-600">🎉 Payment successful! Refreshing page...</span>';
    
    setTimeout(() => {
      window.location.reload();
    }, 2000);
    
  } catch (error) {
    console.error('Payment failed:', error);
    statusEl.innerHTML = '<span class="text-red-600">❌ Payment failed. Please try again.</span>';
    payBtn.disabled = false;
  }
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
  updateAccessStatus();
  updatePrice();
  setupCurrency();
  
  const payBtn = document.getElementById('pay-btn');
  if (payBtn) {
    payBtn.onclick = processPayment;
  }
  
  console.log('Wiki system initialized');
});
</script>
</Layout>